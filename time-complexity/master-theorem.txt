Master Theorem
T(n) = aT(n/b) + f(n)
aT(n/b) -> recursive part , where a >= 1 and b > 1
f(n) -> not recursive part, f(n) is asymptotically positive
a - number of subproblems at each level of recursion
b - factor by which the problem size is reduced at each call
f(n) - the cost of work done outside the recursive calls (eg. n^2, 2^n, n^3 - exponential functions)

example - finding depth of the tree
considering the bottom most part where the result is constant value usually 1
taking bottom node value n/b^k = 1 where k -> depth of the tree
=> k = log(n) (with base b)
n - total nodes of the tree
to find this we use the branching factor "a" -> each problem gets divided into a subproblems so the complexity becomes a^(logn (base b)) also equal to n^(loga (base b)) -> property of log -> Complexity of the recursive part

To find which part - recursive or non-recursive is dominant? -> divide in three different cases
case(1): recursive part dominates -> f(n) = O(n^(loga base b) - epsillon) where epsillon > 0 -> so overall complexity that of the recursive
case(2): none grows polynomially faster than the other - f(n) = n(loga (base b)*logn^k) where k >= 0 this happens when the function contains logarithmic function. since log function go faster than linear but slower than polynomial. n < nlogn < n^2 so total complexity becomes of both O(n^loga(base b)*logn^(k+1))
case(3): non recursive part dominates so complexity = O(f(n)) -> a*f(n/b) <= kf(n)

Binary Search Recurrence Relation
T(n) = T(n / 2) + 1; T(n/2) -> recurrence relation, 1 -> non-recursive relation -> both are constant times 
recursive => n^(log(1)(base 2)) and for the non-recursive = 1
This is the second case of the Master Theorem -> so overall complexity = complexity of both hence for binary search complexity is O(logn) , here k = 0

Another relation
T(n) = 2T(n / 2) + nlogn
recursive -> O(n^log2(base 2)) and non-recursive = nlogn
non recursive part grows faster by a logarithmic factor so this is the second case of master theorem
-> overall = O(nlogn^2)

Another relation
T(n) = 2T(n/4) + n^0.51
recursive -> n^log2(base 4) and non-recursive n^0.51
non recursive part grows faster than the recursive -> even though difference is small but on the large value of n it will outperform it
This is third case of the master theorm so a*f(n/b) <= k*f(n)
2*(n/4)^0.51 <= k*n^0.51
2(1/4)^0.51 <= k
2(1/2^2)^0.51 <= k
2(1/2^1.02) <= k
1/2^0.02 <= k
condition satisfied for k < 1
so complexity becomes from the third case -> O(n^0.51)
